package crawler

import (
	"encoding/json"
	"fmt"
	"io"
	"log"
	"net/http"
	"net/url"

	"github.com/labstack/echo"
)

//http://localhost:4000/other/kakao?query=getting
const (
	KUrl = "https://dapi.kakao.com/v3/search/book?sort=accuracy&page=1&size=10&query="
	Key  = "KakaoAK 7c0701bbd87d9ecf163ea94bab7578ad"
)

func Kakao(c echo.Context) error {
	/****쿼리 받음*******/
	b := c.QueryParam("query")
	log.Println(b)
	url := KUrl + url.QueryEscape(b)
	log.Println(url)
	//# NewRequest로 리퀘스트 객체 req 생성
	req, err := http.NewRequest("GET", url, nil)
	if err != nil {
		log.Print(err)
	}
	//# req에 Authkey 헤더 설정
	req.Header.Add("Authorization", Key)

	cl := &http.Client{}
	//# 생성한 요청 보냄
	resp, err := cl.Do(req)
	if err != nil {
		log.Print(err)
	}
	//# 바디 데이터 받고 닫음
	body, err := io.ReadAll(resp.Body)
	resp.Body.Close()
	//# 에러 출력
	if resp.StatusCode > 299 {
		log.Fatalf("Response failed with status code: %d and\nbody: %s\n", resp.StatusCode, body)
	}
	if err != nil {
		log.Fatal(err)
	}

	var data KakaoModel
	if err := json.Unmarshal(body, &data); err != nil { // Parse []byte to go struct pointer
		fmt.Println("Can not unmarshal JSON")
	}

	log.Printf("%v", data)
	return c.String(200, "data")
}

// func a(c echo.Context) error {
// 	bodydata, _ := io.ReadAll(c.Request().Body)
// 	defer c.Request().Body.Close()
// 	data := AutoGenerated{}
// 	json.Unmarshal(bodydata, &data)
// 	log.Println(data)

// 	return c.String(200, "test")
// }
