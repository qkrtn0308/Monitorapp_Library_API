package crawler

import (
	"encoding/json"
	"fmt"
	"io"
	"log"
	"net/http"
	"net/url"

	"github.com/labstack/echo"
)

const (
	Url     = "http://book.interpark.com/api/search.api?key=7CD336F1E85935A4F1510B29C5A65BCB5D5C09CF78D0D2FDE0B1DBA045A28214&query="
	OutputX = "&output=xml"
	OutputJ = "&output=json"
)

func Interpark(c echo.Context) error {
	/****쿼리 받음*******/
	b := c.QueryParam("query")
	log.Println(b)
	req := Url + url.QueryEscape(b) + OutputJ
	log.Println(req)
	/****인터파크로 요청 보냄*******/
	resp, err := http.Get(req)
	if err != nil {
		log.Print(err)
	}
	body, err := io.ReadAll(resp.Body)

	resp.Body.Close()
	if resp.StatusCode > 299 {
		log.Fatalf("Response failed with status code: %d and\nbody: %s\n", resp.StatusCode, body)
	}
	if err != nil {
		log.Fatal(err)
	}

	var data AutoGenerated
	if err := json.Unmarshal(body, &data); err != nil { // Parse []byte to go struct pointer
		fmt.Println("Can not unmarshal JSON")
	}

	log.Printf("%v", data)
	return c.String(200, "data")
}

// func a(c echo.Context) error {
// 	bodydata, _ := io.ReadAll(c.Request().Body)
// 	defer c.Request().Body.Close()
// 	data := AutoGenerated{}
// 	json.Unmarshal(bodydata, &data)
// 	log.Println(data)

// 	return c.String(200, "test")
// }
